workspace(name = "jmc_auto")

# googletest (GTest and GMock)
new_http_archive(
    name = "gtest",
    build_file = "third_party/gtest.BUILD",
    sha256 = "58a6f4277ca2bc8565222b3bbd58a177609e9c488e8a72649359ba51450db7d8",
    strip_prefix = "googletest-release-1.8.0",
    url = "file:///home/tmp/googletest-release-1.8.0.tar.gz",
)

# gflags
http_archive(
    name = "com_github_gflags_gflags",
    sha256 = "466c36c6508a451734e4f4d76825cf9cd9b8716d2b70ef36479ae40f08271f88",
    strip_prefix = "gflags-2.2.0",
    url = "file:///home/tmp/gflags-2.2.0.tar.gz",
)

bind(
    name = "gflags",
    actual = "@com_github_gflags_gflags//:gflags",
)

# glog
new_http_archive(
    name = "glog",
    build_file = "third_party/glog.BUILD",
    sha256 = "7580e408a2c0b5a89ca214739978ce6ff480b5e7d8d7698a2aa92fadc484d1e0",
    strip_prefix = "glog-0.3.5",
    url = "file:///home/tmp/glog-0.3.5.tar.gz",
)

# Google Benchmark
new_http_archive(
    name = "benchmark",
    build_file = "third_party/benchmark.BUILD",
    sha256 = "e7334dd254434c6668e33a54c8f839194c7c61840d52f4b6258eee28e9f3b20e",
    strip_prefix = "benchmark-1.1.0",
    url = "file:///home/tmp/benchmark-1.1.0.tar.gz",
)

# cpplint from google style guide
new_http_archive(
    name = "google_styleguide",
    build_file = "third_party/google_styleguide.BUILD",
    strip_prefix = "styleguide-159b4c81bbca97a9ca00f1195a37174388398a67",
    url = "file:///home/tmp/styleguide.zip",
)

# eigen
new_http_archive(
    name = "eigen",
    build_file = "third_party/eigen.BUILD",
    sha256 = "04f8a4fa4afedaae721c1a1c756afeea20d3cdef0ce3293982cf1c518f178502",
    strip_prefix = "eigen-eigen-b9cd8366d4e8",
    url = "file:///home/tmp/eigen-3.2.10.tar.gz",
)

#  ceres
http_archive(
    name = "com_google_ceres_solver",
    strip_prefix = "ceres-solver-1.14.0",
    url = "file:///home/tmp/ceres-solver-1.14.0.zip",
)

bind(
    name = "ceres",
    actual = "@com_google_ceres_solver//:ceres",
)


# CivetWeb (web server)
new_http_archive(
    name = "civetweb",
    build_file = "third_party/civetweb.BUILD",
    sha256 = "e6958f005aa01b02645bd3ff9760dd085e83d30530cdd97b584632419195bea5",
    strip_prefix = "civetweb-1.10",
    url = "file:///home/tmp/civetweb-1.10.tar.gz",
)

# curlpp
new_http_archive(
    name = "curlpp",
    build_file = "third_party/curlpp.BUILD",
    sha256 = "97e3819bdcffc3e4047b6ac57ca14e04af85380bd93afe314bee9dd5c7f46a0a",
    strip_prefix = "curlpp-0.8.1",
    url = "file:///home/tmp/curlpp-0.8.1.tar.gz",
)

#ros
new_local_repository(
    name = "ros",
    build_file = "third_party/ros.BUILD",
    path = "/home/tmp/ros",
)

# OpenCV 2.4.13.2
new_http_archive(
    name = "opencv2",
    build_file = "third_party/opencv2.BUILD",
    strip_prefix = "opencv-2.4.13.2",
    url = "file:///home/tmp/opencv-2.4.13.2.zip",
)

# PCL 1.7
# =======
# This requires libpcl-dev to be installed in your Ubuntu/Debian.
new_local_repository(
    name = "pcl",
    build_file = "third_party/pcl.BUILD",
    path = "/usr/local/include/pcl-1.7",
)

new_local_repository(
    name = "glew",
    build_file = "third_party/glew.BUILD",
    path = "/usr/include",
)

new_local_repository(
    name = "opengl",
    build_file = "third_party/opengl.BUILD",
    path = "/usr/include",
)

new_local_repository(
    name = "glfw",
    build_file = "third_party/glfw.BUILD",
    path = "/usr/include",
)

new_local_repository(
    name = "vtk",
    build_file = "third_party/vtk.BUILD",
    path = "/usr/include/vtk-VTK_VERSION",
)

# Caffe
new_local_repository(
    name = "caffe",
    build_file = "third_party/caffe.BUILD",
    path = "/usr/include/caffe",
)

# YAML-CPP
new_http_archive(
    name = "yaml_cpp",
    build_file = "third_party/yaml_cpp.BUILD",
    strip_prefix = "yaml-cpp-yaml-cpp-0.5.3",
    url = "file:///home/tmp/yaml-cpp-0.5.3.zip",
)

new_http_archive(
    name = "qpOASES",
    build_file = "third_party/qpOASES.BUILD",
    sha256 = "e70b49586b58b8f5fd348e951f3c3094ed0ad371a96097a499f343a7aeec7dbe",
    strip_prefix = "qp-oases-3.2.1-1",
    url = "file:///home/tmp/qp-oases-3.2.1-1.zip",
)

# IpOpt
new_local_repository(
    name = "ipopt",
    build_file = "third_party/ipopt.BUILD",
    path = "/usr/local/ipopt/include/coin",
)

# Cuda
new_local_repository(
    name = "cuda",
    build_file = "third_party/cuda.BUILD",
    path = "/usr/local/cuda",
)

# Local-integ
new_local_repository(
    name = "local_integ",
    build_file = "third_party/local_integ.BUILD",
    path = "third_party/local_integ",
)

# Proj.4
new_http_archive(
    name = "proj4",
    build_file = "third_party/proj4.BUILD",
    strip_prefix = "proj.4-4.9.3",
    url = "file:///home/tmp/proj.4-4.9.3.zip",
)

# tinyxml2
new_http_archive(
    name = "tinyxml2",
    build_file = "third_party/tinyxml2.BUILD",
    strip_prefix = "tinyxml2-5.0.1",
    url = "file:///home/tmp/tinyxml2-5.0.1.zip",
)

#protobuf 3.3
http_archive(
    name = "com_google_protobuf",
    strip_prefix = "protobuf-3.3.0",
    url = "file:///home/tmp/protobuf-3.3.0.tar.gz",
)

#jsoncpp .so for adv_plat
new_local_repository(
    name = "jsoncpp",
    build_file = "third_party/jsoncpp.BUILD",
    path = "/usr/local/jmc_auto/jsoncpp/",
)

#adv_plat
new_local_repository(
    name = "adv_plat",
    build_file = "third_party/adv_plat.BUILD",
    path = "/usr/local/jmc_auto/adv_plat",
)

# websocket++/websocketpp
#new_http_archive(
#    name = "websocketpp",
#    url = "file:///home/tmp/websocketpp-0.7.0.tar.gz",
#    build_file = "third_party/websocketpp.BUILD",
#    strip_prefix = "websocketpp-0.7.0",
#)

# proto rules (Protobuf and GRPC)
#http_archive(
#    name = "org_pubref_rules_protobuf",
#    url = "file:///home/tmp/rules_protobuf-0.7.1.tar.gz",
#    strip_prefix = "rules_protobuf-0.7.1",
#)
#
#load("@org_pubref_rules_protobuf//cpp:rules.bzl", "cpp_proto_repositories")
#cpp_proto_repositories(
#    lang_deps = {
#	"gtest": {
#        "build_file" : "third_party/gtest.BUILD",
#        "strip_prefix" : "googletest-release-1.8.0",
#        "url" : "file:///home/tmp/googletest-release-1.8.0.tar.gz",
#        },
#        # Grpc repo is required by multiple languages but we put it here.
#        "com_github_grpc_grpc": {
#            "rule": "http_archive",
#            "strip_prefix" : "grpc-3808b6efe66b87269d43847bc113e94e2d3d28fb",
#            "url" : "file:///home/tmp/grpc.zip",
#        },
#
#        # Hooray! The boringssl team provides a "master-with-bazel" branch
#        # with all BUILD files ready to go.  To update, pick the
#        # newest-ish commit-id off that branch.
#        "boringssl": {
#            "rule": "http_archive",
#            "url": "file:///home/tmp/boringssl-master-with-bazel.zip",
#        },
#
#        # libssl is required for c++ grpc where it is expected in
#        # //external:libssl.  This can be either boringssl or openssl.
#        "libssl": {
#            "rule": "bind",
#            "actual": "@boringssl//boringssl-master-with-bazel:ssl",
#        },
#
#        # C-library for zlib
#        "com_github_madler_zlib": {
#            "rule": "new_http_archive",
#            "url": "file:///home/tmp/zlib-1.2.8.zip",
#	    "strip_prefix" : "zlib-1.2.8",
#            "build_file": "third_party/com_github_madler_zlib.BUILD",
#        },
#
#        # grpc++ expects //external:zlib
#        "zlib": {
#            "rule": "bind",
#            "actual": "@com_github_madler_zlib//:zlib",
#        },
#
#        # grpc++ expects "//external:protobuf_clib"
#        "protobuf_clib": {
#            "rule": "bind",
#            "actual": "@com_github_google_protobuf//:protobuf",
#        },
#
#        # grpc++ expects //external:nanopb
#        "nanopb": {
#            "rule": "bind",
#            "actual": "@com_github_grpc_grpc//third_party/nanopb",
#        },
#
#        # Bind the executable cc_binary grpc plugin into
#        # //external:protoc_gen_grpc_cpp.  Expects
#        # //external:protobuf_compiler. TODO: is it really necessary to
#        # bind it in external?
#        "protoc_gen_grpc_cpp": {
#            "rule": "bind",
#            "actual": "@com_github_grpc_grpc//:grpc_cpp_plugin",
#        },
#
#        # Bind the protobuf proto_lib into //external.  Required for
#        # compiling the protoc_gen_grpc plugin
#        "protobuf_compiler": {
#            "rule": "bind",
#            "actual": "@com_github_google_protobuf//:protoc_lib",
#        },
#        "com_github_google_protobuf": {
#        "rule": "http_archive",
#	"url" : "file:///home/tmp/protobuf-52ab3b07ac9a6889ed0ac9bf21afd8dab8ef0014.zip",
#        "strip_prefix" : "protobuf-52ab3b07ac9a6889ed0ac9bf21afd8dab8ef0014",
#	},
#        "protoc": {
#            "rule": "bind",
#            "actual": "@com_github_google_protobuf//:protoc",
#        },
#    },
#)

#5G
new_local_repository(
    name = "lib_usb",
    path = "/usr/lib/x86_64-linux-gnu",
    build_file = "third_party/lib_usb.BUILD"
)

#planning5.5

# boost
new_local_repository(
    name = "boost",
    build_file = "third_party/boost.BUILD",
    path = "/usr/local/jmc_auto/boost/include",
)

# OSQP
new_local_repository(
    name = "osqp",
    build_file = "third_party/osqp.BUILD",
    path = "/usr/local/include/osqp/include",
)

# ADOL-C
new_local_repository(
    name = "adolc",
    build_file = "third_party/adolc.BUILD",
    path = "/usr/local/adolc/include",
)

#com_google_absl
http_archive(
     name = "com_google_absl",
     strip_prefix = "abseil-cpp-20180600",
     url = "file:///home/tmp/abseil-cpp-20180600.tar.gz",
)

# ad-rss-lib
new_http_archive(
    name = "ad_rss_lib",
    build_file = "third_party/rss_lib.BUILD",
    strip_prefix = "ad-rss-lib-1.1.0",
    url = "file:///home/tmp/ad_rss_lib-1.1.0.tar.gz",
)
