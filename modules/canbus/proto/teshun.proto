syntax = "proto2";

package jmc_auto.canbus;

message Epb_status_0x152_152 {
// Report Message
  enum Epb_brakelampreqType {
    EPB_BRAKELAMPREQ_BRAKE_LAMP_OFF = 0;
    EPB_BRAKELAMPREQ_BRAKE_LAMP_ON = 1;
  }
  enum Epb_sysfaultstatusType {
    EPB_SYSFAULTSTATUS_NO_FAULT = 0;
    EPB_SYSFAULTSTATUS_WARNING = 1;
    EPB_SYSFAULTSTATUS_FAULT = 2;
    EPB_SYSFAULTSTATUS_RESEVED = 3;
  }
  enum Epb_parkingstatusType {
    EPB_PARKINGSTATUS_RELEASED = 0;
    EPB_PARKINGSTATUS_RELEASE_ONGOING = 1;
    EPB_PARKINGSTATUS_PARK_ONGOING = 2;
    EPB_PARKINGSTATUS_PARKED = 3;
    EPB_PARKINGSTATUS_UNKOWN = 4;
  }
  enum Epb_switchstatusType {
    EPB_SWITCHSTATUS_NO_ACTION_ON_SWITCH = 0;
    EPB_SWITCHSTATUS_SWITCH_TO_RELEASE = 1;
    EPB_SWITCHSTATUS_SWITCH_TO_PARK = 2;
    EPB_SWITCHSTATUS_RESERVED = 3;
  }
  // [] [0|255]
  optional int32 checksum_0x152 = 1;
  // [] [0|15]
  optional int32 rolling_counter_0x152 = 2;
  // [] [0|0]
  optional int32 epb_faultcode = 3;
  // [] [0|1]
  optional Epb_brakelampreqType epb_brakelampreq = 4;
  // [] [0|2]
  optional Epb_sysfaultstatusType epb_sysfaultstatus = 5;
  // [] [0|4]
  optional Epb_parkingstatusType epb_parkingstatus = 6;
  // [] [0|2]
  optional Epb_switchstatusType epb_switchstatus = 7;
}

message Gw_abs_0x211_211 {
// Report Message
  enum Abs_whlspdreristatusType {
    ABS_WHLSPDRERISTATUS_VALID = 0;
    ABS_WHLSPDRERISTATUS_INVALID = 1;
  }
  enum Abs_whlspdrelestatusType {
    ABS_WHLSPDRELESTATUS_VALID = 0;
    ABS_WHLSPDRELESTATUS_INVALID = 1;
  }
  enum Abs_whlspdfrntristatusType {
    ABS_WHLSPDFRNTRISTATUS_VALID = 0;
    ABS_WHLSPDFRNTRISTATUS_INVALID = 1;
  }
  enum Abs_whlspdfrntlestatusType {
    ABS_WHLSPDFRNTLESTATUS_VALID = 0;
    ABS_WHLSPDFRNTLESTATUS_INVALID = 1;
  }
  // [] [0|255]
  optional int32 checksum_0x211 = 1;
  // [] [0|15]
  optional int32 rollingcounter_0x211 = 2;
  // [] [0|1]
  optional Abs_whlspdreristatusType abs_whlspdreristatus = 3;
  // [] [0|1]
  optional Abs_whlspdrelestatusType abs_whlspdrelestatus = 4;
  // [] [0|1]
  optional Abs_whlspdfrntristatusType abs_whlspdfrntristatus = 5;
  // [] [0|1]
  optional Abs_whlspdfrntlestatusType abs_whlspdfrntlestatus = 6;
  // [kph] [0|230.2875]
  optional double abs_whlspdreri = 7;
  // [kph] [0|230.2875]
  optional double abs_whlspdrele = 8;
  // [kph] [0|230.2875]
  optional double abs_whlspdfrntri = 9;
  // [kph] [0|230.2875]
  optional double abs_whlspdfrntle = 10;
}

message Bcm_door_0x310_310 {
// Report Message
  enum Bcm_rearwiperstsType {
    BCM_REARWIPERSTS_NO_USED = 0;
    BCM_REARWIPERSTS_OFF = 1;
    BCM_REARWIPERSTS_ON = 2;
    BCM_REARWIPERSTS_RESERVED = 3;
  }
  enum Bcm_frontwiperstsType {
    BCM_FRONTWIPERSTS_NO_USED = 0;
    BCM_FRONTWIPERSTS_OFF = 1;
    BCM_FRONTWIPERSTS_LOW = 2;
    BCM_FRONTWIPERSTS_HIGH = 3;
  }
  enum Bcm_chargeplugstsType {
    BCM_CHARGEPLUGSTS_NO_USED = 0;
    BCM_CHARGEPLUGSTS_CLOSED = 1;
    BCM_CHARGEPLUGSTS_OPEN = 2;
    BCM_CHARGEPLUGSTS_FAULT = 3;
  }
  enum Bcm_enginehoodstsType {
    BCM_ENGINEHOODSTS_NO_USED = 0;
    BCM_ENGINEHOODSTS_CLOSED = 1;
    BCM_ENGINEHOODSTS_OPEN = 2;
    BCM_ENGINEHOODSTS_FAULT = 3;
  }
  enum Bcm_trunkdoorpreunlockstsType {
    BCM_TRUNKDOORPREUNLOCKSTS_NO_USED_NO_ACTION = 0;
    BCM_TRUNKDOORPREUNLOCKSTS_PREUNLOCKED = 1;
  }
  enum Bcm_antitheftstsType {
    BCM_ANTITHEFTSTS_RELIEVE_ANTI_THEFT = 0;
    BCM_ANTITHEFTSTS_ANTI_THEFT = 1;
    BCM_ANTITHEFTSTS_ANTI_THEFT_PASS = 2;
    BCM_ANTITHEFTSTS_ANTI_THEFT_FAULT_ALARM = 3;
  }
  enum Bcm_lockunlockfeedbackType {
    BCM_LOCKUNLOCKFEEDBACK_NO_LOCK_UNLOCK_ACTION = 0;
    BCM_LOCKUNLOCKFEEDBACK_PE_LOCK = 1;
    BCM_LOCKUNLOCKFEEDBACK_RKE_LOCK = 2;
    BCM_LOCKUNLOCKFEEDBACK_LEAVE_VEHICLE_LOCK = 3;
    BCM_LOCKUNLOCKFEEDBACK_MASTER_LOCK_D6_D8_CB_F8 = 4;
    BCM_LOCKUNLOCKFEEDBACK_FINGER_LOCK_BB_FA_B3_D7_C9_CF_CB_F8 = 5;
    BCM_LOCKUNLOCKFEEDBACK_RKE_30S_AUTOLOCK_BF_D8_D7_AF_BB_C0 = 6;
    BCM_LOCKUNLOCKFEEDBACK_PE_30S_AUTOLOCK = 7;
    BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_30S_AUTOLOCK = 8;
    BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_LOCK = 15;
    BCM_LOCKUNLOCKFEEDBACK_PE_UNLOCK = 17;
    BCM_LOCKUNLOCKFEEDBACK_RKE_UNLOCK = 18;
    BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_UNLOCK = 19;
    BCM_LOCKUNLOCKFEEDBACK_MASTER_UNLOCK_D6_E2_CB_F8 = 20;
    BCM_LOCKUNLOCKFEEDBACK_FINGER_UNLOCK_BB_FA_B3_E2_CB_F8 = 21;
    BCM_LOCKUNLOCKFEEDBACK_CRASHUNLOCK_C5_F6_BD_E2_CB_F8 = 22;
    BCM_LOCKUNLOCKFEEDBACK_KEYREMOVALUNLOCK_B0_CE_B3_E2_CB_F8 = 23;
    BCM_LOCKUNLOCKFEEDBACK_ENGOFFUNLOCK_BB_F0_BD_E2_CB_F8 = 24;
    BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_UNLOCK = 31;
  }
  enum Bcm_doorlockststrunkType {
    BCM_DOORLOCKSTSTRUNK_NO_USED = 0;
    BCM_DOORLOCKSTSTRUNK_LOCKED = 1;
    BCM_DOORLOCKSTSTRUNK_UNLOCKED = 2;
    BCM_DOORLOCKSTSTRUNK_FAULT = 3;
  }
  enum Bcm_doorststrunkType {
    BCM_DOORSTSTRUNK_NO_USED = 0;
    BCM_DOORSTSTRUNK_CLOSED = 1;
    BCM_DOORSTSTRUNK_OPEN = 2;
    BCM_DOORSTSTRUNK_FAULT = 3;
  }
  enum Bcm_doorlockstsrearriType {
    BCM_DOORLOCKSTSREARRI_NO_USED = 0;
    BCM_DOORLOCKSTSREARRI_LOCKED = 1;
    BCM_DOORLOCKSTSREARRI_UNLOCKED = 2;
    BCM_DOORLOCKSTSREARRI_FAULT = 3;
  }
  enum Bcm_doorlockstsrearleType {
    BCM_DOORLOCKSTSREARLE_NO_USED = 0;
    BCM_DOORLOCKSTSREARLE_LOCKED = 1;
    BCM_DOORLOCKSTSREARLE_UNLOCKED = 2;
    BCM_DOORLOCKSTSREARLE_FAULT = 3;
  }
  enum Bcm_doorlockstsfrntriType {
    BCM_DOORLOCKSTSFRNTRI_NO_USED = 0;
    BCM_DOORLOCKSTSFRNTRI_LOCKED = 1;
    BCM_DOORLOCKSTSFRNTRI_UNLOCKED = 2;
    BCM_DOORLOCKSTSFRNTRI_FAULT = 3;
  }
  enum Bcm_doorlockstsfrntleType {
    BCM_DOORLOCKSTSFRNTLE_NO_USED = 0;
    BCM_DOORLOCKSTSFRNTLE_LOCKED = 1;
    BCM_DOORLOCKSTSFRNTLE_UNLOCKED = 2;
    BCM_DOORLOCKSTSFRNTLE_FAULT = 3;
  }
  enum Bcm_doorstsrearriType {
    BCM_DOORSTSREARRI_NO_USED = 0;
    BCM_DOORSTSREARRI_CLOSED = 1;
    BCM_DOORSTSREARRI_OPEN = 2;
    BCM_DOORSTSREARRI_FAULT = 3;
  }
  enum Bcm_doorstsrearleType {
    BCM_DOORSTSREARLE_NO_USED = 0;
    BCM_DOORSTSREARLE_CLOSED = 1;
    BCM_DOORSTSREARLE_OPEN = 2;
    BCM_DOORSTSREARLE_FAULT = 3;
  }
  enum Bcm_doorstsfrntriType {
    BCM_DOORSTSFRNTRI_NO_USED = 0;
    BCM_DOORSTSFRNTRI_CLOSED = 1;
    BCM_DOORSTSFRNTRI_OPEN = 2;
    BCM_DOORSTSFRNTRI_FAULT = 3;
  }
  enum Bcm_doorstsfrntleType {
    BCM_DOORSTSFRNTLE_NO_USED = 0;
    BCM_DOORSTSFRNTLE_CLOSED = 1;
    BCM_DOORSTSFRNTLE_OPEN = 2;
    BCM_DOORSTSFRNTLE_FAULT = 3;
  }
  // [] [0|255]
  optional int32 bcm_checksum_0x310 = 1;
  // [] [0|15]
  optional int32 bcm_rolling_counter_0x310 = 2;
  // [] [0|3]
  optional Bcm_rearwiperstsType bcm_rearwipersts = 3;
  // [] [0|3]
  optional Bcm_frontwiperstsType bcm_frontwipersts = 4;
  // [] [0|3]
  optional Bcm_chargeplugstsType bcm_chargeplugsts = 5;
  // [] [0|3]
  optional Bcm_enginehoodstsType bcm_enginehoodsts = 6;
  // [] [0|1]
  optional Bcm_trunkdoorpreunlockstsType bcm_trunkdoorpreunlocksts = 7;
  // [] [0|3]
  optional Bcm_antitheftstsType bcm_antitheftsts = 8;
  // [] [0|31]
  optional Bcm_lockunlockfeedbackType bcm_lockunlockfeedback = 9;
  // [] [0|3]
  optional Bcm_doorlockststrunkType bcm_doorlockststrunk = 10;
  // [] [0|3]
  optional Bcm_doorststrunkType bcm_doorststrunk = 11;
  // [] [0|3]
  optional Bcm_doorlockstsrearriType bcm_doorlockstsrearri = 12;
  // [] [0|3]
  optional Bcm_doorlockstsrearleType bcm_doorlockstsrearle = 13;
  // [] [0|3]
  optional Bcm_doorlockstsfrntriType bcm_doorlockstsfrntri = 14;
  // [] [0|3]
  optional Bcm_doorlockstsfrntleType bcm_doorlockstsfrntle = 15;
  // [] [0|3]
  optional Bcm_doorstsrearriType bcm_doorstsrearri = 16;
  // [] [0|3]
  optional Bcm_doorstsrearleType bcm_doorstsrearle = 17;
  // [] [0|3]
  optional Bcm_doorstsfrntriType bcm_doorstsfrntri = 18;
  // [] [0|3]
  optional Bcm_doorstsfrntleType bcm_doorstsfrntle = 19;
}

message Gw_vcu_sts_0x218_218 {
// Report Message
  enum Vcu_nlockrequestType {
    VCU_NLOCKREQUEST_NO_USE = 0;
    VCU_NLOCKREQUEST_LOCK = 1;
    VCU_NLOCKREQUEST_UNLOCK = 2;
    VCU_NLOCKREQUEST_INVALID = 3;
  }
  enum Vcu_plockrequestType {
    VCU_PLOCKREQUEST_NO_USE = 0;
    VCU_PLOCKREQUEST_LOCK = 1;
    VCU_PLOCKREQUEST_UNLOCK = 2;
    VCU_PLOCKREQUEST_INVALID = 3;
  }
  enum Vcu_vehicle_modeType {
    VCU_VEHICLE_MODE_STANDBY_IG_OFF_MODE = 1;
    VCU_VEHICLE_MODE_VEHICLE_RESET_MODE = 2;
    VCU_VEHICLE_MODE_HV_ACTIVATION_MODE = 3;
    VCU_VEHICLE_MODE_DRIVING_MODE = 4;
    VCU_VEHICLE_MODE_HV_TERMINATION_MODE = 5;
    VCU_VEHICLE_MODE_CHARGING_MODE = 6;
    VCU_VEHICLE_MODE_RESERVED = 7;
    VCU_VEHICLE_MODE_EMER_DRIVING_MODE = 8;
  }
  enum Vcu_engaddfuel_rqType {
    VCU_ENGADDFUEL_RQ_NO_RQ = 0;
    VCU_ENGADDFUEL_RQ_RQ = 1;
  }
  enum Vcu_fan_rqType {
    VCU_FAN_RQ_NO_RQ = 0;
    VCU_FAN_RQ_FAN_LOW_RQ = 1;
    VCU_FAN_RQ_FAN_HIGH_RQ = 4;
  }
  enum Vcu_engstart_rqType {
    VCU_ENGSTART_RQ_NO_RQ = 0;
    VCU_ENGSTART_RQ_RQ = 1;
  }
  enum Vcu_dcu_parkrequestType {
    VCU_DCU_PARKREQUEST_OFF = 0;
    VCU_DCU_PARKREQUEST_PARK = 1;
    VCU_DCU_PARKREQUEST_UNPARK = 2;
    VCU_DCU_PARKREQUEST_INVALID = 3;
  }
  enum Vcu_actualgearlevelpositionvalidType {
    VCU_ACTUALGEARLEVELPOSITIONVALID_VALID = 0;
    VCU_ACTUALGEARLEVELPOSITIONVALID_INVALID = 1;
  }
  enum Vcu_actualgearlevelpositionType {
    VCU_ACTUALGEARLEVELPOSITION_INITIAL = 0;
    VCU_ACTUALGEARLEVELPOSITION_P_PARK = 1;
    VCU_ACTUALGEARLEVELPOSITION_R_REVERSE = 2;
    VCU_ACTUALGEARLEVELPOSITION_N_NEUTRAL = 3;
    VCU_ACTUALGEARLEVELPOSITION_D_DRIVE = 4;
    VCU_ACTUALGEARLEVELPOSITION_INVALID = 5;
  }
  enum Vcu_bms_chgstart_alwType {
    VCU_BMS_CHGSTART_ALW_FORBID = 0;
    VCU_BMS_CHGSTART_ALW_ALLOW = 1;
  }
  enum Vcu_bms_hvonoff_reqType {
    VCU_BMS_HVONOFF_REQ_FORBID = 0;
    VCU_BMS_HVONOFF_REQ_ALLOW = 1;
  }
  enum Vcu_vehfailgrade_errType {
    VCU_VEHFAILGRADE_ERR_NORMAL = 0;
    VCU_VEHFAILGRADE_ERR_LEVEL1 = 1;
    VCU_VEHFAILGRADE_ERR_LEVEL2 = 2;
    VCU_VEHFAILGRADE_ERR_LEVEL3 = 3;
  }
  enum Vcu_running_modeType {
    VCU_RUNNING_MODE_STANDBY = 0;
    VCU_RUNNING_MODE_EV_MODE = 1;
    VCU_RUNNING_MODE_HYBIRD_MODE = 2;
  }
  enum Vcu_bp_sleep_allowedType {
    VCU_BP_SLEEP_ALLOWED_NOT_ALLOWED = 0;
    VCU_BP_SLEEP_ALLOWED_ALLOWED = 1;
  }
  enum Vcu_hvil_inType {
    VCU_HVIL_IN_OFF = 0;
    VCU_HVIL_IN_ON = 1;
  }
  enum Vcu_hvil_outType {
    VCU_HVIL_OUT_OFF = 0;
    VCU_HVIL_OUT_ON = 1;
  }
  // [] [0|255]
  optional int32 checksum_0x218 = 1;
  // [] [0|15]
  optional int32 rolling_counter_0x218 = 2;
  // [] [0|3]
  optional Vcu_nlockrequestType vcu_nlockrequest = 3;
  // [] [0|3]
  optional Vcu_plockrequestType vcu_plockrequest = 4;
  // [] [0|15]
  optional Vcu_vehicle_modeType vcu_vehicle_mode = 5;
  // [] [0|1]
  optional Vcu_engaddfuel_rqType vcu_engaddfuel_rq = 6;
  // [] [0|7]
  optional Vcu_fan_rqType vcu_fan_rq = 7;
  // [] [0|1]
  optional Vcu_engstart_rqType vcu_engstart_rq = 8;
  // [] [0|3]
  optional Vcu_dcu_parkrequestType vcu_dcu_parkrequest = 9;
  // [] [0|1]
  optional Vcu_actualgearlevelpositionvalidType vcu_actualgearlevelpositionvalid = 10;
  // [] [0|7]
  optional Vcu_actualgearlevelpositionType vcu_actualgearlevelposition = 11;
  // [] [0|1]
  optional Vcu_bms_chgstart_alwType vcu_bms_chgstart_alw = 12;
  // [] [0|1]
  optional Vcu_bms_hvonoff_reqType vcu_bms_hvonoff_req = 13;
  // [] [0|3]
  optional Vcu_vehfailgrade_errType vcu_vehfailgrade_err = 14;
  // [] [0|3]
  optional Vcu_running_modeType vcu_running_mode = 15;
  // [] [0|1]
  optional Vcu_bp_sleep_allowedType vcu_bp_sleep_allowed = 16;
  // [] [0|1]
  optional Vcu_hvil_inType vcu_hvil_in = 17;
  // [] [0|1]
  optional Vcu_hvil_outType vcu_hvil_out = 18;
  // [\A1\E6] [-40|215]
  optional int32 vcu_bp_input_cooling_temp = 19;
  // [\A1\E6] [-40|215]
  optional int32 vcu_motor_input_cooling_temp = 20;
}

message Adu_controldrive_0x120_120 {
// Control Message
  enum Adu_controtorque_rawflagType {
    ADU_CONTROTORQUE_RAWFLAG_NO_FILTERS = 0;
    ADU_CONTROTORQUE_RAWFLAG_FILTERS = 1;
  }
  enum Adu_controtorque_enableType {
    ADU_CONTROTORQUE_ENABLE_DISABLE = 0;
    ADU_CONTROTORQUE_ENABLE_ENABLE = 1;
  }
  enum Adu_targetgear_positionType {
    ADU_TARGETGEAR_POSITION_INITIAL = 0;
    ADU_TARGETGEAR_POSITION_P_PARK = 1;
    ADU_TARGETGEAR_POSITION_R_REVERSE = 2;
    ADU_TARGETGEAR_POSITION_N_NEUTRAL = 3;
    ADU_TARGETGEAR_POSITION_D_DRIVE = 4;
    ADU_TARGETGEAR_POSITION_INVALID = 5;
  }
  enum Adu_targetgear_enableType {
    ADU_TARGETGEAR_ENABLE_DISABLE = 0;
    ADU_TARGETGEAR_ENABLE_ENABLE = 1;
  }
  // [] [0|255]
  optional int32 checksum_0x120 = 1;
  // [] [0|15]
  optional int32 rolling_counter_0x120 = 2;
  // [] [0|1]
  optional Adu_controtorque_rawflagType adu_controtorque_rawflag = 3;
  // [Nm] [-10000|10000]
  optional int32 adu_targetdrving_torque = 4;
  // [] [0|1]
  optional Adu_controtorque_enableType adu_controtorque_enable = 5;
  // [] [0|7]
  optional Adu_targetgear_positionType adu_targetgear_position = 6;
  // [] [0|1]
  optional Adu_targetgear_enableType adu_targetgear_enable = 7;
}

message Gw_vcu_control2_0x131_131 {
// Report Message
  enum Vcu_sts_vcuType {
    VCU_STS_VCU_INITIALIZING = 0;
    VCU_STS_VCU_READY = 1;
    VCU_STS_VCU_WARNING = 2;
    VCU_STS_VCU_FAULT = 3;
  }
  enum Vcu_brake_flagType {
    VCU_BRAKE_FLAG_NO_ACTIVE = 0;
    VCU_BRAKE_FLAG_ACTIVE = 1;
  }
  enum Vcu_tractor_flagType {
    VCU_TRACTOR_FLAG_NO_ACTIVE = 0;
    VCU_TRACTOR_FLAG_ACTIVE = 1;
  }
  enum Vcu_pwt_mode_dashType {
    VCU_PWT_MODE_DASH_ECOHEV = 0;
    VCU_PWT_MODE_DASH_ECO_EV = 1;
    VCU_PWT_MODE_DASH_PWRHEV = 2;
    VCU_PWT_MODE_DASH_PWREV = 3;
    VCU_PWT_MODE_DASH_EV_ECO = 4;
    VCU_PWT_MODE_DASH_EV_POWER = 5;
    VCU_PWT_MODE_DASH_RESERVED = 7;
  }
  enum Vcu_mcu_motor1_capdischarge_reqType {
    VCU_MCU_MOTOR1_CAPDISCHARGE_REQ_NO_REQUEST = 0;
    VCU_MCU_MOTOR1_CAPDISCHARGE_REQ_DISCHARGE = 1;
  }
  // [] [0|255]
  optional int32 checksum_0x131 = 1;
  // [] [0|15]
  optional int32 rolling_counter_0x131 = 2;
  // [] [0|3]
  optional Vcu_sts_vcuType vcu_sts_vcu = 3;
  // [] [0|1]
  optional Vcu_brake_flagType vcu_brake_flag = 4;
  // [] [0|1]
  optional Vcu_tractor_flagType vcu_tractor_flag = 5;
  // [%] [0|100]
  optional double vcu_brkpedpos_meas_vcu = 6;
  // [] [0|7]
  optional Vcu_pwt_mode_dashType vcu_pwt_mode_dash = 7;
  // [] [0|1]
  optional Vcu_mcu_motor1_capdischarge_reqType vcu_mcu_motor1_capdischarge_req = 8;
  // [Nm] [-1000|1000]
  optional double vcu_mcu_motor1_trq_req = 9;
  // [rpm] [-10000|10000]
  optional int32 vcu_mcu_motor1_spd_req = 10;
}

message Gw_scu_shiftersts_0xc8_c8 {
// Report Message
  enum Scu_shifterlockstatusType {
    SCU_SHIFTERLOCKSTATUS_UNLOCKED = 0;
    SCU_SHIFTERLOCKSTATUS_LOCKED = 1;
    SCU_SHIFTERLOCKSTATUS_FAULT = 3;
  }
  enum ShifterlockstatusType {
    SHIFTERLOCKSTATUS_UNLOCKED = 0;
    SHIFTERLOCKSTATUS_LOCKED = 1;
    SHIFTERLOCKSTATUS_FAULT = 3;
  }
  enum ShifterpositionfailureType {
    SHIFTERPOSITIONFAILURE_NOFAULT = 0;
    SHIFTERPOSITIONFAILURE_MODESELECTORSENSORFAIL = 1;
    SHIFTERPOSITIONFAILURE_ROTARYPOSITIONSENSORFAIL = 2;
    SHIFTERPOSITIONFAILURE_CANBUSCOMMUNICATION = 3;
    SHIFTERPOSITIONFAILURE_SOLENOIDFAIL = 4;
  }
  enum ShifterpositionType {
    SHIFTERPOSITION_ERROR = 0;
    SHIFTERPOSITION_MANUAL_MODE = 3;
    SHIFTERPOSITION_DRIVE = 5;
    SHIFTERPOSITION_NEUTRAL = 6;
    SHIFTERPOSITION_REVERSE = 7;
    SHIFTERPOSITION_PARK = 8;
    SHIFTERPOSITION_UPSHIFT = 9;
    SHIFTERPOSITION_DOWNSHIFT = 10;
  }
  enum ShifterpositioninvType {
    SHIFTERPOSITIONINV_DOWNSHIFT = 5;
    SHIFTERPOSITIONINV_UPSHIFT = 6;
    SHIFTERPOSITIONINV_PARK = 7;
    SHIFTERPOSITIONINV_REVERSE = 8;
    SHIFTERPOSITIONINV_NEUTRAL = 9;
    SHIFTERPOSITIONINV_DRIVE = 10;
    SHIFTERPOSITIONINV_MANUAL_MODE = 12;
    SHIFTERPOSITIONINV_ERROR = 15;
  }
  enum Sys_sts_scuType {
    SYS_STS_SCU_INIT = 0;
    SYS_STS_SCU_OK = 1;
    SYS_STS_SCU_WARNING = 2;
    SYS_STS_SCU_FAULT = 3;
  }
  // [] [0|255]
  optional int32 checksum_0xc8 = 1;
  // [] [0|15]
  optional int32 rolling_counter_0xc8 = 2;
  // [] [0|3]
  optional Scu_shifterlockstatusType scu_shifterlockstatus = 3;
  // [] [0|1]
  optional ShifterlockstatusType shifterlockstatus = 4;
  // [] [0|4]
  optional ShifterpositionfailureType shifterpositionfailure = 5;
  // [] [0|15]
  optional ShifterpositionType shifterposition = 6;
  // [] [0|15]
  optional ShifterpositioninvType shifterpositioninv = 7;
  // [] [0|3]
  optional Sys_sts_scuType sys_sts_scu = 8;
}

message Gw_vcu_drivests_0x10a_10a {
// Report Message
  enum Vcu_vehicleerror_interveneType {
    VCU_VEHICLEERROR_INTERVENE_NOTINTERVENE = 0;
    VCU_VEHICLEERROR_INTERVENE_INTERVENE = 1;
  }
  enum Vcu_torque_controlstatusType {
    VCU_TORQUE_CONTROLSTATUS_TEMPORARILY_INHIBIT = 0;
    VCU_TORQUE_CONTROLSTATUS_AVAILABLEFORCONTROL = 1;
    VCU_TORQUE_CONTROLSTATUS_ACTIVE = 2;
    VCU_TORQUE_CONTROLSTATUS_PERMANENTLY_FAILED = 3;
  }
  enum Vcu_torquedriver_interveneType {
    VCU_TORQUEDRIVER_INTERVENE_NOTINTERVENE = 0;
    VCU_TORQUEDRIVER_INTERVENE_INTERVENE = 1;
  }
  enum Vcu_gearpos_controlstatusType {
    VCU_GEARPOS_CONTROLSTATUS_TEMPORARILY_INHIBIT = 0;
    VCU_GEARPOS_CONTROLSTATUS_AVAILABLEFORCONTROL = 1;
    VCU_GEARPOS_CONTROLSTATUS_ACTIVE = 2;
    VCU_GEARPOS_CONTROLSTATUS_PERMANENTLY_FAILED = 3;
  }
  enum Vcu_gearposdriver_interveneType {
    VCU_GEARPOSDRIVER_INTERVENE_NOTINTERVENE = 0;
    VCU_GEARPOSDRIVER_INTERVENE_INTERVENE = 1;
  }
  enum Vcu_veh_stsType {
    VCU_VEH_STS_NOTREADY = 0;
    VCU_VEH_STS_READY = 1;
  }
  enum Vcu_axlespdstType {
    VCU_AXLESPDST_NOERROR = 0;
    VCU_AXLESPDST_ERROR = 1;
  }
  // [] [0|255]
  optional int32 checksum_0x10a = 1;
  // [] [0|15]
  optional int32 rolling_counter_0x10a = 2;
  // [] [0|1]
  optional Vcu_vehicleerror_interveneType vcu_vehicleerror_intervene = 3;
  // [] [0|3]
  optional Vcu_torque_controlstatusType vcu_torque_controlstatus = 4;
  // [] [0|1]
  optional Vcu_torquedriver_interveneType vcu_torquedriver_intervene = 5;
  // [] [0|3]
  optional Vcu_gearpos_controlstatusType vcu_gearpos_controlstatus = 6;
  // [] [0|1]
  optional Vcu_gearposdriver_interveneType vcu_gearposdriver_intervene = 7;
  // [] [0|1]
  optional Vcu_veh_stsType vcu_veh_sts = 8;
  // [] [0|1]
  optional Vcu_axlespdstType vcu_axlespdst = 9;
  // [rpm] [0|16383]
  optional double vcu_axlespd = 10;
}

message Adu_controlbrake_0x110_110 {
// Control Message
  enum Adu_parkrelease_reqType {
    ADU_PARKRELEASE_REQ_NO_CONTROL = 0;
    ADU_PARKRELEASE_REQ_RELEASE = 1;
    ADU_PARKRELEASE_REQ_PARK = 2;
    ADU_PARKRELEASE_REQ_RESERVED = 3;
  }
  enum Adu_controbrk_standstillType {
    ADU_CONTROBRK_STANDSTILL_NOT_STANDSTILL = 0;
    ADU_CONTROBRK_STANDSTILL_STANDSTILL = 1;
  }
  enum Adu_controbrk_enableType {
    ADU_CONTROBRK_ENABLE_DISABLE = 0;
    ADU_CONTROBRK_ENABLE_ENABLE = 1;
  }
  // [] [0|255]
  optional int32 ic_checksum_0x110 = 1;
  // [] [0|15]
  optional int32 ic_rolling_counter_0x110 = 2;
  // [g] [0|0]
  optional double adu_tgt_deceleration = 3;
  // [%] [0|100]
  optional double adu_brktmcposition_req = 4;
  // [] [0|3]
  optional Adu_parkrelease_reqType adu_parkrelease_req = 5;
  // [] [0|1]
  optional Adu_controbrk_standstillType adu_controbrk_standstill = 6;
  // [] [0|1]
  optional Adu_controbrk_enableType adu_controbrk_enable = 7;
  // [kpa] [0|32000]
  optional int32 adu_mastercylinderpressreq = 8;
}

message Eps2_status_0x112_112 {
// Report Message
  enum Eps_controlstatusType {
    EPS_CONTROLSTATUS_TEMPORARILY_INHIBIT = 0;
    EPS_CONTROLSTATUS_AVAILABLE_FOR_CONTROL = 1;
    EPS_CONTROLSTATUS_ACTIVE = 2;
    EPS_CONTROLSTATUS_PERMANENTLY_FAILED = 3;
  }
  enum Eps_driver_interveneType {
    EPS_DRIVER_INTERVENE_NOT_INTERVENE = 0;
    EPS_DRIVER_INTERVENE_INTERVENE = 1;
  }
  enum Eps_sasfailurestsType {
    EPS_SASFAILURESTS_SENSOR_INFORMATION_INVALID__AN_INTERNAL_SENSOR_FAULT_OCCURRED = 0;
    EPS_SASFAILURESTS_SENSOR_INFORMATION_VALID = 1;
  }
  enum Eps_torsionbartorquedirType {
    EPS_TORSIONBARTORQUEDIR_POSITIVE = 0;
    EPS_TORSIONBARTORQUEDIR_NEGATIVE = 1;
  }
  enum Eps_torsionbartorquevalidType {
    EPS_TORSIONBARTORQUEVALID_INVALID = 0;
    EPS_TORSIONBARTORQUEVALID_VALID = 1;
  }
  // [] [0|3]
  optional Eps_controlstatusType eps_controlstatus = 1;
  // [] [0|1]
  optional Eps_driver_interveneType eps_driver_intervene = 2;
  // [deg/s] [0|511]
  optional int32 eps_steerwheelrotspd = 3;
  // [degree] [-1000|1000]
  optional double eps_steeringwheelang = 4;
  // [Nm] [0|8]
  optional double eps_torsionbartorque = 5;
  // [] [0|1]
  optional Eps_sasfailurestsType eps_sasfailurests = 6;
  // [] [0|1]
  optional Eps_torsionbartorquedirType eps_torsionbartorquedir = 7;
  // [] [0|1]
  optional Eps_torsionbartorquevalidType eps_torsionbartorquevalid = 8;
}

message Gw_mcu_power_0x226_226 {
// Report Message
  enum Mcu_sys_stsType {
    MCU_SYS_STS_INIT = 0;
    MCU_SYS_STS_OK = 1;
    MCU_SYS_STS_WARNING = 2;
    MCU_SYS_STS_FAULT = 3;
  }
  // [] [0|255]
  optional int32 checksum_0x226 = 1;
  // [] [0|15]
  optional int32 rolling_counter_0x226 = 2;
  // [] [0|1]
  optional bool mcu_serialnum_est = 3;
  // [Nm] [-1023|1024]
  optional int32 mcu_tm04_trqmindyn = 4;
  // [Nm] [-1023|1024]
  optional int32 mcu_tm04_trqmaxdyn = 5;
  // [Nm] [0|2000]
  optional int32 mcu_maxtrq_est = 6;
  // [Nm] [-2000|0]
  optional int32 mcu_mintrq_est = 7;
  // [] [0|3]
  optional Mcu_sys_stsType mcu_sys_sts = 8;
}

message Adu_controleps2_0x100_100 {
// Control Message
  enum Adu_controepsenableType {
    ADU_CONTROEPSENABLE_DISABLE = 0;
    ADU_CONTROEPSENABLE_ENABLE = 1;
  }
  // [] [0|255]
  optional int32 adu_100h_messagechecksum = 1;
  // [] [0|15]
  optional int32 adu_100h_messagecounter = 2;
  // [deg/s] [0|510]
  optional int32 adu_ctrsteeringwheelanglespeed = 3;
  // [degree] [-612|612]
  optional double adu_controsteeringwheelangle = 4;
  // [] [0|1]
  optional Adu_controepsenableType adu_controepsenable = 5;
}

message Gw_mcu_output_0x225_225 {
// Report Message
  enum Mcu_work_stsType {
    MCU_WORK_STS_CONSUM = 0;
    MCU_WORK_STS_GENERATE = 1;
    MCU_WORK_STS_OFF = 2;
    MCU_WORK_STS_READY = 3;
    MCU_WORK_STS_INVALID = 4;
  }
  enum Mcu_ctrmode_stsType {
    MCU_CTRMODE_STS_INITIALIZATION = 0;
    MCU_CTRMODE_STS_PRECHARGE = 1;
    MCU_CTRMODE_STS_DISABLE = 2;
    MCU_CTRMODE_STS_STANDBY = 3;
    MCU_CTRMODE_STS_ANTISLIP = 4;
    MCU_CTRMODE_STS_ALOFFSETCAL = 5;
    MCU_CTRMODE_STS_NCTLINT = 7;
    MCU_CTRMODE_STS_TRQCT = 8;
    MCU_CTRMODE_STS_ASCACTIVE = 9;
    MCU_CTRMODE_STS_AFTERRUN = 11;
    MCU_CTRMODE_STS_PREFAILURE = 12;
    MCU_CTRMODE_STS_FAILURE = 13;
    MCU_CTRMODE_STS_DISCHARGE = 14;
  }
  enum Mcu_capacitor_stsType {
    MCU_CAPACITOR_STS_FORBIDCHARGE = 0;
    MCU_CAPACITOR_STS_WAITCHARGE = 1;
    MCU_CAPACITOR_STS_ALLOWDISCHARGE = 2;
    MCU_CAPACITOR_STS_FORBIDDISCHARGE = 3;
    MCU_CAPACITOR_STS_ERRORDISCHARGE = 4;
  }
  // [] [0|255]
  optional int32 checksum_0x225 = 1;
  // [] [0|15]
  optional int32 rolling_counter_0x225 = 2;
  // [] [0|4]
  optional Mcu_work_stsType mcu_work_sts = 3;
  // [] [0|4]
  optional Mcu_ctrmode_stsType mcu_ctrmode_sts = 4;
  // [] [0|4]
  optional Mcu_capacitor_stsType mcu_capacitor_sts = 5;
  // [rpm] [-15000|15000]
  optional int32 mcu_spd_meas = 6;
  // [Nm] [-2000|2000]
  optional int32 mcu_trq_meas = 7;
}

message Gw_abs_sts_0x221_221 {
// Report Message
  enum Abs_whlmilgfrntlestatusType {
    ABS_WHLMILGFRNTLESTATUS_VALID = 0;
    ABS_WHLMILGFRNTLESTATUS_INVALID = 1;
  }
  enum Abs_whlmilgfrntristatusType {
    ABS_WHLMILGFRNTRISTATUS_VALID = 0;
    ABS_WHLMILGFRNTRISTATUS_INVALID = 1;
  }
  enum Abs_vehspdlgtstatusType {
    ABS_VEHSPDLGTSTATUS_VALID = 0;
    ABS_VEHSPDLGTSTATUS_INVALID = 1;
    ABS_VEHSPDLGTSTATUS_INIT = 2;
  }
  enum Abs_vehspddirectionType {
    ABS_VEHSPDDIRECTION_FORWARD = 0;
    ABS_VEHSPDDIRECTION_BACKWARD = 1;
  }
  enum Abs_ebdflgfltType {
    ABS_EBDFLGFLT_NO_FAILURE = 0;
    ABS_EBDFLGFLT_FAILURE = 1;
  }
  enum Abs_absflgfltType {
    ABS_ABSFLGFLT_NO_FAILURE = 0;
    ABS_ABSFLGFLT_FAILURE = 1;
  }
  enum Abs_absctrlactvType {
    ABS_ABSCTRLACTV_NOT_ACTIVE = 0;
    ABS_ABSCTRLACTV_ACTIVE = 1;
  }
  // [] [0|255]
  optional int32 checksum_0x221 = 1;
  // [] [0|15]
  optional int32 rolling_counter_0x221 = 2;
  // [] [0|1]
  optional Abs_whlmilgfrntlestatusType abs_whlmilgfrntlestatus = 3;
  // [] [0|1]
  optional Abs_whlmilgfrntristatusType abs_whlmilgfrntristatus = 4;
  // [] [0|2]
  optional Abs_vehspdlgtstatusType abs_vehspdlgtstatus = 5;
  // [] [0|1]
  optional Abs_vehspddirectionType abs_vehspddirection = 6;
  // [kph] [0|230.2875]
  optional double abs_vehspdlgt = 7;
  // [] [0|1]
  optional Abs_ebdflgfltType abs_ebdflgflt = 8;
  // [] [0|1]
  optional Abs_absflgfltType abs_absflgflt = 9;
  // [] [0|1]
  optional Abs_absctrlactvType abs_absctrlactv = 10;
  // [] [0|65535]
  optional int32 abs_whlmilgfrntri = 11;
  // [] [0|65535]
  optional int32 abs_whlmilgfrntle = 12;
}

message Ibc_status_0x122_122 {
// Report Message
  enum Ibc_parkrelease_reqType {
    IBC_PARKRELEASE_REQ_NO_CONTROL = 0;
    IBC_PARKRELEASE_REQ_RELEASE = 1;
    IBC_PARKRELEASE_REQ_PARK = 2;
    IBC_PARKRELEASE_REQ_DYNAMIC_PARKING = 3;
  }
  enum Ibc_mastercylinderpressvalidType {
    IBC_MASTERCYLINDERPRESSVALID_INVAILD = 0;
    IBC_MASTERCYLINDERPRESSVALID_VALID = 1;
  }
  enum Ibc_brakeactiveType {
    IBC_BRAKEACTIVE_BRAKE_INACTIVE = 0;
    IBC_BRAKEACTIVE_BRAKE_ACTIVE = 1;
  }
  enum Ibc_brakereqavailabeType {
    IBC_BRAKEREQAVAILABE_BRAKE_NOT_AVAILABLE = 0;
    IBC_BRAKEREQAVAILABE_BRAKE_AVAILABLE = 1;
  }
  enum Ibc_brakepressurereqackType {
    IBC_BRAKEPRESSUREREQACK_NOT_ACK = 0;
    IBC_BRAKEPRESSUREREQACK_ACK = 1;
  }
  enum Ibc_controlstatusType {
    IBC_CONTROLSTATUS_TEMPORARILY_INHIBIT = 0;
    IBC_CONTROLSTATUS_AVAILABLE_FOR_CONTROL = 1;
    IBC_CONTROLSTATUS_ACTIVE = 2;
    IBC_CONTROLSTATUS_PERMANENTLY_FAILED = 3;
  }
  enum Ibc_driver_interveneType {
    IBC_DRIVER_INTERVENE_NOT_INTERVENE = 0;
    IBC_DRIVER_INTERVENE_INTERVENE = 1;
  }
  enum Ibc_systemstatusType {
    IBC_SYSTEMSTATUS_SYSTEM_NO_FAULT = 0;
    IBC_SYSTEMSTATUS_SYSTEM_WARING = 1;
    IBC_SYSTEMSTATUS_SYSTEM_FAULT = 2;
    IBC_SYSTEMSTATUS_RESERVED = 3;
  }
  // [] [0|255]
  optional int32 checksum_0x122 = 1;
  // [] [0|15]
  optional int32 rolling_counter_0x122 = 2;
  // [] [0|3]
  optional Ibc_parkrelease_reqType ibc_parkrelease_req = 3;
  // [] [0|0]
  optional int32 ibc_faultcode = 4;
  // [%] [0|99.9998]
  optional double ibc_brkpedalrawposition = 5;
  // [] [0|1]
  optional Ibc_mastercylinderpressvalidType ibc_mastercylinderpressvalid = 6;
  // [kpa] [0|32000]
  optional int32 ibc_mastercylinderpress = 7;
  // [] [0|1]
  optional Ibc_brakeactiveType ibc_brakeactive = 8;
  // [] [0|1]
  optional Ibc_brakereqavailabeType ibc_brakereqavailabe = 9;
  // [] [0|1]
  optional Ibc_brakepressurereqackType ibc_brakepressurereqack = 10;
  // [] [0|2]
  optional Ibc_controlstatusType ibc_controlstatus = 11;
  // [] [0|1]
  optional Ibc_driver_interveneType ibc_driver_intervene = 12;
  // [] [0|3]
  optional Ibc_systemstatusType ibc_systemstatus = 13;
}

message Gw_vcu_whltq_0x107_107 {
// Report Message
  enum Vcu_kickdownType {
    VCU_KICKDOWN_NOTACTIVE = 0;
    VCU_KICKDOWN_ACTIVE = 1;
  }
  enum Vcu_accpedalratioerrorType {
    VCU_ACCPEDALRATIOERROR_NOERROR = 0;
    VCU_ACCPEDALRATIOERROR_ERROR = 1;
  }
  enum Vcu_brkpedalstasusType {
    VCU_BRKPEDALSTASUS_NOTPRESSED = 0;
    VCU_BRKPEDALSTASUS_PRESSED = 1;
    VCU_BRKPEDALSTASUS_RESERVED = 2;
    VCU_BRKPEDALSTASUS_ERROR = 3;
  }
  // [] [0|255]
  optional int32 checksum_0x107 = 1;
  // [] [0|15]
  optional int32 rolling_counter_0x107 = 2;
  // [] [0|1]
  optional Vcu_kickdownType vcu_kickdown = 3;
  // [] [0|1]
  optional Vcu_accpedalratioerrorType vcu_accpedalratioerror = 4;
  // [%] [0|99.9998]
  optional double vcu_accpedalratio = 5;
  // [%] [0|99.9998]
  optional double vcu_accrawpedalratio = 6;
  // [] [0|3]
  optional Vcu_brkpedalstasusType vcu_brkpedalstasus = 7;
  // [Nm] [-30000|30000]
  optional int32 vcu_minindicatedtorqwhl = 8;
  // [Nm] [-30000|30000]
  optional int32 vcu_maxindicatedtorqwhl = 9;
}

message Bcm_bodysts_0x344_344 {
// Report Message
  enum Bcm_brakelampstatusType {
    BCM_BRAKELAMPSTATUS_BRAKE_LAMP_INACTIVE = 0;
    BCM_BRAKELAMPSTATUS_BRAKE_LAMP_ACTIVE = 1;
  }
  enum Bcm_rearfoglampstatusType {
    BCM_REARFOGLAMPSTATUS_INVALID = 0;
    BCM_REARFOGLAMPSTATUS_OFF = 1;
    BCM_REARFOGLAMPSTATUS_ON = 2;
    BCM_REARFOGLAMPSTATUS_RESERVED = 3;
  }
  enum Bcm_frontfoglampstatusType {
    BCM_FRONTFOGLAMPSTATUS_INVALID = 0;
    BCM_FRONTFOGLAMPSTATUS_OFF = 1;
    BCM_FRONTFOGLAMPSTATUS_ON = 2;
    BCM_FRONTFOGLAMPSTATUS_RESERVED = 3;
  }
  enum Bcm_washerstatusType {
    BCM_WASHERSTATUS_INVALID = 0;
    BCM_WASHERSTATUS_OFF = 1;
    BCM_WASHERSTATUS_ON = 2;
    BCM_WASHERSTATUS_RESERVED = 3;
  }
  enum Bcm_wiperstatusType {
    BCM_WIPERSTATUS_INVALID = 0;
    BCM_WIPERSTATUS_OFF = 1;
    BCM_WIPERSTATUS_LOW_SPEED = 2;
    BCM_WIPERSTATUS_HIGH_SPEED = 3;
    BCM_WIPERSTATUS_RESERVED = 7;
  }
  enum Bcm_doorlockfeedbackType {
    BCM_DOORLOCKFEEDBACK_INVALID = 0;
    BCM_DOORLOCKFEEDBACK_LOCK_ACTION = 1;
    BCM_DOORLOCKFEEDBACK_UNLOCK_ACTION = 2;
    BCM_DOORLOCKFEEDBACK_RESERVED = 3;
  }
  enum Bcm_hornstatusType {
    BCM_HORNSTATUS_INVALID = 0;
    BCM_HORNSTATUS_OFF = 1;
    BCM_HORNSTATUS_ON = 2;
    BCM_HORNSTATUS_RESERVED = 3;
  }
  enum Bcm_highbeamlampstatusType {
    BCM_HIGHBEAMLAMPSTATUS_INVALID = 0;
    BCM_HIGHBEAMLAMPSTATUS_OFF = 1;
    BCM_HIGHBEAMLAMPSTATUS_ON = 2;
    BCM_HIGHBEAMLAMPSTATUS_RESERVED = 3;
  }
  enum Bcm_lowbeamlampstatusType {
    BCM_LOWBEAMLAMPSTATUS_INVALID = 0;
    BCM_LOWBEAMLAMPSTATUS_OFF = 1;
    BCM_LOWBEAMLAMPSTATUS_ON = 2;
    BCM_LOWBEAMLAMPSTATUS_RESERVED = 3;
  }
  enum Bcm_positionlampstatusType {
    BCM_POSITIONLAMPSTATUS_INVALID = 0;
    BCM_POSITIONLAMPSTATUS_OFF = 1;
    BCM_POSITIONLAMPSTATUS_ON = 2;
    BCM_POSITIONLAMPSTATUS_RESERVED = 3;
  }
  enum Bcm_hazardlampstatusType {
    BCM_HAZARDLAMPSTATUS_INVALID = 0;
    BCM_HAZARDLAMPSTATUS_OFF = 1;
    BCM_HAZARDLAMPSTATUS_BLINK = 2;
    BCM_HAZARDLAMPSTATUS_RESERVED = 3;
  }
  enum Bcm_rightturnlampstatusType {
    BCM_RIGHTTURNLAMPSTATUS_INVALID = 0;
    BCM_RIGHTTURNLAMPSTATUS_OFF = 1;
    BCM_RIGHTTURNLAMPSTATUS_BLINK = 2;
    BCM_RIGHTTURNLAMPSTATUS_RESERVED = 3;
  }
  enum Bcm_leftturnlampstatusType {
    BCM_LEFTTURNLAMPSTATUS_INVALID = 0;
    BCM_LEFTTURNLAMPSTATUS_OFF = 1;
    BCM_LEFTTURNLAMPSTATUS_BLINK = 2;
    BCM_LEFTTURNLAMPSTATUS_RESERVED = 3;
  }
  // [] [0|3]
  optional Bcm_brakelampstatusType bcm_brakelampstatus = 1;
  // [] [0|3]
  optional Bcm_rearfoglampstatusType bcm_rearfoglampstatus = 2;
  // [] [0|3]
  optional Bcm_frontfoglampstatusType bcm_frontfoglampstatus = 3;
  // [] [0|3]
  optional Bcm_washerstatusType bcm_washerstatus = 4;
  // [] [0|7]
  optional Bcm_wiperstatusType bcm_wiperstatus = 5;
  // [] [0|3]
  optional Bcm_doorlockfeedbackType bcm_doorlockfeedback = 6;
  // [] [0|3]
  optional Bcm_hornstatusType bcm_hornstatus = 7;
  // [] [0|3]
  optional Bcm_highbeamlampstatusType bcm_highbeamlampstatus = 8;
  // [] [0|3]
  optional Bcm_lowbeamlampstatusType bcm_lowbeamlampstatus = 9;
  // [] [0|3]
  optional Bcm_positionlampstatusType bcm_positionlampstatus = 10;
  // [] [0|3]
  optional Bcm_hazardlampstatusType bcm_hazardlampstatus = 11;
  // [] [0|3]
  optional Bcm_rightturnlampstatusType bcm_rightturnlampstatus = 12;
  // [] [0|2]
  optional Bcm_leftturnlampstatusType bcm_leftturnlampstatus = 13;
}

message Gw_bms_display_0x323_323 {
// Report Message
  // [] [0|255]
  optional int32 checksum_0x323 = 1;
  // [] [0|15]
  optional int32 rolling_counter_0x323 = 2;
  // [kwh] [0|800]
  optional double bms_consumeq_est = 3;
  // [kwh] [0|800]
  optional double bms_availableeq_est = 4;
  // [%] [0|400]
  optional double bms_soh_est = 5;
  // [%] [0|100]
  optional double bms_socdisplay_est = 6;
}

message Adu_bodycontrol_0x333_333 {
// Control Message
  enum Adu_rearfoglampcontrolType {
    ADU_REARFOGLAMPCONTROL_INVALID = 0;
    ADU_REARFOGLAMPCONTROL_OFF = 1;
    ADU_REARFOGLAMPCONTROL_ON = 2;
    ADU_REARFOGLAMPCONTROL_RESERVED = 3;
  }
  enum Adu_frontfoglampcontrolType {
    ADU_FRONTFOGLAMPCONTROL_INVALID = 0;
    ADU_FRONTFOGLAMPCONTROL_OFF = 1;
    ADU_FRONTFOGLAMPCONTROL_ON = 2;
    ADU_FRONTFOGLAMPCONTROL_RESERVED = 3;
  }
  enum Adu_washercontrolType {
    ADU_WASHERCONTROL_INVALID = 0;
    ADU_WASHERCONTROL_OFF = 1;
    ADU_WASHERCONTROL_ON = 2;
    ADU_WASHERCONTROL_RESERVED = 3;
  }
  enum Adu_wipercontrolType {
    ADU_WIPERCONTROL_INVALID = 0;
    ADU_WIPERCONTROL_OFF = 1;
    ADU_WIPERCONTROL_LOW_SPEED_A3_A8_B5_CD_CB_B5_A3_A9 = 2;
    ADU_WIPERCONTROL_HIGH_SPEED_A3_A8_B8_DF_CB_B5_A3_A9 = 3;
    ADU_WIPERCONTROL_RESERVED = 7;
  }
  enum Adu_doorcontrolType {
    ADU_DOORCONTROL_INVALID = 0;
    ADU_DOORCONTROL_LOCK = 1;
    ADU_DOORCONTROL_UNLOCK = 2;
    ADU_DOORCONTROL_RESERVED = 3;
  }
  enum Adu_horncontrolType {
    ADU_HORNCONTROL_INVALID = 0;
    ADU_HORNCONTROL_OFF = 1;
    ADU_HORNCONTROL_ON = 2;
    ADU_HORNCONTROL_RESERVED = 3;
  }
  enum Adu_highbeamlampcontrolType {
    ADU_HIGHBEAMLAMPCONTROL_INVALID = 0;
    ADU_HIGHBEAMLAMPCONTROL_OFF = 1;
    ADU_HIGHBEAMLAMPCONTROL_ON = 2;
    ADU_HIGHBEAMLAMPCONTROL_RESERVED = 3;
  }
  enum Adu_lowbeamlampcontrolType {
    ADU_LOWBEAMLAMPCONTROL_INVALID = 0;
    ADU_LOWBEAMLAMPCONTROL_OFF = 1;
    ADU_LOWBEAMLAMPCONTROL_ON = 2;
    ADU_LOWBEAMLAMPCONTROL_RESERVED = 3;
  }
  enum Adu_positionlampcontrolType {
    ADU_POSITIONLAMPCONTROL_INVALID = 0;
    ADU_POSITIONLAMPCONTROL_OFF = 1;
    ADU_POSITIONLAMPCONTROL_ON = 2;
    ADU_POSITIONLAMPCONTROL_RESERVED = 3;
  }
  enum Adu_hazardlampcontrolType {
    ADU_HAZARDLAMPCONTROL_INVALID = 0;
    ADU_HAZARDLAMPCONTROL_OFF = 1;
    ADU_HAZARDLAMPCONTROL_BLINK = 2;
    ADU_HAZARDLAMPCONTROL_RESERVED = 3;
  }
  enum Adu_rightturnlampcontrolType {
    ADU_RIGHTTURNLAMPCONTROL_INVALID = 0;
    ADU_RIGHTTURNLAMPCONTROL_OFF = 1;
    ADU_RIGHTTURNLAMPCONTROL_BLINK = 2;
    ADU_RIGHTTURNLAMPCONTROL_RESERVED = 3;
  }
  enum Adu_leftturnlampcontrolType {
    ADU_LEFTTURNLAMPCONTROL_INVALID = 0;
    ADU_LEFTTURNLAMPCONTROL_OFF = 1;
    ADU_LEFTTURNLAMPCONTROL_BLINK = 2;
    ADU_LEFTTURNLAMPCONTROL_RESERVED = 3;
  }
  // [] [0|3]
  optional Adu_rearfoglampcontrolType adu_rearfoglampcontrol = 1;
  // [] [0|3]
  optional Adu_frontfoglampcontrolType adu_frontfoglampcontrol = 2;
  // [] [0|3]
  optional Adu_washercontrolType adu_washercontrol = 3;
  // [] [0|7]
  optional Adu_wipercontrolType adu_wipercontrol = 4;
  // [] [0|3]
  optional Adu_doorcontrolType adu_doorcontrol = 5;
  // [] [0|3]
  optional Adu_horncontrolType adu_horncontrol = 6;
  // [] [0|3]
  optional Adu_highbeamlampcontrolType adu_highbeamlampcontrol = 7;
  // [] [0|3]
  optional Adu_lowbeamlampcontrolType adu_lowbeamlampcontrol = 8;
  // [] [0|3]
  optional Adu_positionlampcontrolType adu_positionlampcontrol = 9;
  // [] [0|3]
  optional Adu_hazardlampcontrolType adu_hazardlampcontrol = 10;
  // [] [0|3]
  optional Adu_rightturnlampcontrolType adu_rightturnlampcontrol = 11;
  // [] [0|2]
  optional Adu_leftturnlampcontrolType adu_leftturnlampcontrol = 12;
}

message Gw_bms_sts_0x181_181 {
// Report Message
  enum Bms_err_levType {
    BMS_ERR_LEV_NO_ERROR = 0;
    BMS_ERR_LEV_LEVEL1_ERROR = 1;
    BMS_ERR_LEV_LEVEL2_ERROR = 2;
    BMS_ERR_LEV_LEVEL3_ERROR = 3;
  }
  enum Bms_idu_statusType {
    BMS_IDU_STATUS_NORMAL = 0;
    BMS_IDU_STATUS_LEVEL1_600_A6_B8_V = 1;
    BMS_IDU_STATUS_LEVEL2_500_A6_B8_V = 2;
    BMS_IDU_STATUS_LEVEL3_CHARGE_100_A6_B8_V_DRIVE_400_A6_B8_V = 3;
  }
  enum Bms_batbalance_errType {
    BMS_BATBALANCE_ERR_NORMAL = 0;
    BMS_BATBALANCE_ERR_ERROR = 1;
  }
  enum Bms_chg_stsType {
    BMS_CHG_STS_NOT_READY = 0;
    BMS_CHG_STS_READY_TO_CHARGING = 1;
    BMS_CHG_STS_CHARGING = 2;
    BMS_CHG_STS_CHARGEERROR = 3;
    BMS_CHG_STS_CHARGEOK = 4;
  }
  enum Bms_balance_stsType {
    BMS_BALANCE_STS_INACTIVE = 0;
    BMS_BALANCE_STS_ACTIVE = 1;
  }
  enum Bms_hvdown_reqType {
    BMS_HVDOWN_REQ_NO_REQUEST = 0;
    BMS_HVDOWN_REQ_REQUEST = 1;
  }
  enum Bms_hvonoff_stsType {
    BMS_HVONOFF_STS_HV_OFF = 0;
    BMS_HVONOFF_STS_PRECHARGE = 1;
    BMS_HVONOFF_STS_HV_ON = 2;
    BMS_HVONOFF_STS_FAIL_TO_HV_ON = 3;
  }
  enum Bms_sys_stsType {
    BMS_SYS_STS_INIT = 0;
    BMS_SYS_STS_OK = 1;
    BMS_SYS_STS_WARNING = 2;
    BMS_SYS_STS_FAULT = 3;
  }
  // [] [0|255]
  optional int32 checksum_0x181 = 1;
  // [] [0|15]
  optional int32 rolling_counter_0x181 = 2;
  // [] [0|3]
  optional Bms_err_levType bms_err_lev = 3;
  // [] [0|3]
  optional Bms_idu_statusType bms_idu_status = 4;
  // [] [0|1]
  optional Bms_batbalance_errType bms_batbalance_err = 5;
  // [%] [0|100]
  optional double bms_socactual_est = 6;
  // [A] [-800|800]
  optional double bms_packcur_meas = 7;
  // [] [0|4]
  optional Bms_chg_stsType bms_chg_sts = 8;
  // [V] [0|800]
  optional double bms_packvol_meas = 9;
  // [] [0|1]
  optional Bms_balance_stsType bms_balance_sts = 10;
  // [] [0|1]
  optional int32 bms_packnum_est = 11;
  // [] [0|1]
  optional Bms_hvdown_reqType bms_hvdown_req = 12;
  // [] [0|3]
  optional Bms_hvonoff_stsType bms_hvonoff_sts = 13;
  // [] [0|3]
  optional Bms_sys_stsType bms_sys_sts = 14;
}

message Gw_vcu_control_0x185_185 {
// Report Message
  enum Vcu_ems_engoperationstatusType {
    VCU_EMS_ENGOPERATIONSTATUS_STOPPED = 0;
    VCU_EMS_ENGOPERATIONSTATUS_RUNNING = 1;
    VCU_EMS_ENGOPERATIONSTATUS_IDLE = 2;
    VCU_EMS_ENGOPERATIONSTATUS_DFCO = 3;
    VCU_EMS_ENGOPERATIONSTATUS_CRANKING = 4;
    VCU_EMS_ENGOPERATIONSTATUS_STALLING = 5;
  }
  enum Vcu_mcu_asd_reqType {
    VCU_MCU_ASD_REQ_ON = 0;
    VCU_MCU_ASD_REQ_OFF = 1;
  }
  enum Vcu_mcu_motor1_ctrmode_reqType {
    VCU_MCU_MOTOR1_CTRMODE_REQ_DISABLE = 0;
    VCU_MCU_MOTOR1_CTRMODE_REQ_STANDBY = 1;
    VCU_MCU_MOTOR1_CTRMODE_REQ_SPEEDMODE = 2;
    VCU_MCU_MOTOR1_CTRMODE_REQ_TORQUEMODE = 3;
    VCU_MCU_MOTOR1_CTRMODE_REQ_ANTISLIP = 4;
    VCU_MCU_MOTOR1_CTRMODE_REQ_ALOFFSETCAL = 5;
  }
  // [] [0|255]
  optional int32 checksum_0x185 = 1;
  // [] [0|15]
  optional int32 rolling_counter_0x185 = 2;
  // [] [0|5]
  optional Vcu_ems_engoperationstatusType vcu_ems_engoperationstatus = 3;
  // [kw] [0|400]
  optional double vcu_maxchgpwr_alw = 4;
  // [kw] [0|400]
  optional double vcu_maxdischgpwr_alw = 5;
  // [] [0|1]
  optional Vcu_mcu_asd_reqType vcu_mcu_asd_req = 6;
  // [] [0|5]
  optional Vcu_mcu_motor1_ctrmode_reqType vcu_mcu_motor1_ctrmode_req = 7;
}

message Ibc_status2_0x124_124 {
// Report Message
  enum Ibc_decelerationvaildType {
    IBC_DECELERATIONVAILD_INVAILD = 0;
    IBC_DECELERATIONVAILD_VALID = 1;
  }
  enum Ibc_brktmcpositionvaildType {
    IBC_BRKTMCPOSITIONVAILD_INVAILD = 0;
    IBC_BRKTMCPOSITIONVAILD_VALID = 1;
  }
  // [] [0|255]
  optional int32 checksum_0x124 = 1;
  // [] [0|15]
  optional int32 rolling_counter_0x124 = 2;
  // [] [0|1]
  optional Ibc_decelerationvaildType ibc_decelerationvaild = 3;
  // [g] [0|0]
  optional double ibc_deceleration = 4;
  // [] [0|1]
  optional Ibc_brktmcpositionvaildType ibc_brktmcpositionvaild = 5;
  // [%] [0|100]
  optional double ibc_brktmcposition = 6;
}

message Gw_vcu_hmi_0x358_358 {
// Report Message
  enum VehiclehvstatusType {
    VEHICLEHVSTATUS_NOT_READY = 0;
    VEHICLEHVSTATUS_HV_ON = 1;
    VEHICLEHVSTATUS_READYTODRIVE = 2;
    VEHICLEHVSTATUS_RESERVED = 3;
  }
  enum PackheatcircuiterrorType {
    PACKHEATCIRCUITERROR_NORMAL = 0;
    PACKHEATCIRCUITERROR_ERROR = 1;
  }
  enum PackheatstatusType {
    PACKHEATSTATUS_INACTIVE = 0;
    PACKHEATSTATUS_ACTIVE = 1;
  }
  enum PackcoolingcircuiterrorType {
    PACKCOOLINGCIRCUITERROR_NORMAL = 0;
    PACKCOOLINGCIRCUITERROR_ERROR = 1;
  }
  enum MotorcoolingcircuiterrorType {
    MOTORCOOLINGCIRCUITERROR_NORMAL = 0;
    MOTORCOOLINGCIRCUITERROR_ERROR = 1;
  }
  enum Vcu_batteryvoltageerrorType {
    VCU_BATTERYVOLTAGEERROR_NO_WARNING = 0;
    VCU_BATTERYVOLTAGEERROR_WARNING = 1;
  }
  enum Vcu_cruisecontrolstatusType {
    VCU_CRUISECONTROLSTATUS_CRUISECONTROLOOFF = 0;
    VCU_CRUISECONTROLSTATUS_ACTIVE = 1;
    VCU_CRUISECONTROLSTATUS_STANDBY = 2;
    VCU_CRUISECONTROLSTATUS_ERROR = 3;
  }
  enum Vcu_driverstatus_stsType {
    VCU_DRIVERSTATUS_STS_NO_DRIVE = 0;
    VCU_DRIVERSTATUS_STS_DRIVE_MODE = 1;
  }
  enum Vcu_drivemode_stsType {
    VCU_DRIVEMODE_STS_INVALID = 0;
    VCU_DRIVEMODE_STS_EV = 1;
    VCU_DRIVEMODE_STS_HEV = 2;
    VCU_DRIVEMODE_STS_FUEL = 3;
  }
  enum Vcu_vehchg_stsType {
    VCU_VEHCHG_STS_INVALID = 0;
    VCU_VEHCHG_STS_STOPCHARGE = 1;
    VCU_VEHCHG_STS_DRIVECHARGE = 2;
    VCU_VEHCHG_STS_NOCHARGE = 3;
    VCU_VEHCHG_STS_CHARGECOMPLETED = 4;
  }
  enum Vcu_tbox_veh_stsType {
    VCU_TBOX_VEH_STS_INVALID = 0;
    VCU_TBOX_VEH_STS_START = 1;
    VCU_TBOX_VEH_STS_OFF = 2;
    VCU_TBOX_VEH_STS_OTHER = 3;
  }
  enum Vcu_icm_energyrecoverymodeType {
    VCU_ICM_ENERGYRECOVERYMODE_NO = 0;
    VCU_ICM_ENERGYRECOVERYMODE_LEVEL1 = 1;
    VCU_ICM_ENERGYRECOVERYMODE_LEVEL2 = 2;
    VCU_ICM_ENERGYRECOVERYMODE_LEVEL3 = 3;
  }
  enum Vcu_icm_vehhvil_errType {
    VCU_ICM_VEHHVIL_ERR_NORMAL = 0;
    VCU_ICM_VEHHVIL_ERR_ERROR = 1;
  }
  enum Vcu_icm_mot_errType {
    VCU_ICM_MOT_ERR_NORMAL = 0;
    VCU_ICM_MOT_ERR_ERROR = 1;
  }
  enum Vcu_icm_packvoltoff_errType {
    VCU_ICM_PACKVOLTOFF_ERR_NORMAL = 0;
    VCU_ICM_PACKVOLTOFF_ERR_ERROR = 1;
  }
  enum Vcu_icm_chggearlvType {
    VCU_ICM_CHGGEARLV_NO_WARNING = 0;
    VCU_ICM_CHGGEARLV_PLEASE_SET_GEARPOSITION_TO_PARK = 1;
  }
  enum Vcu_icm_packsys_errType {
    VCU_ICM_PACKSYS_ERR_NORMAL = 0;
    VCU_ICM_PACKSYS_ERR_ERROR = 1;
  }
  enum Vcu_icm_drvsys_errType {
    VCU_ICM_DRVSYS_ERR_NORMAL = 0;
    VCU_ICM_DRVSYS_ERR_ERROR = 1;
  }
  enum Vcu_icm_veh_errType {
    VCU_ICM_VEH_ERR_NORMAL = 0;
    VCU_ICM_VEH_ERR_ERROR = 1;
  }
  // [] [0|255]
  optional int32 vcu_checksum_0x358 = 1;
  // [] [0|15]
  optional int32 vcu_rollingcounter_0x358 = 2;
  // [] [0|3]
  optional VehiclehvstatusType vehiclehvstatus = 3;
  // [] [0|3]
  optional PackheatcircuiterrorType packheatcircuiterror = 4;
  // [] [0|1]
  optional PackheatstatusType packheatstatus = 5;
  // [] [0|1]
  optional PackcoolingcircuiterrorType packcoolingcircuiterror = 6;
  // [] [0|1]
  optional MotorcoolingcircuiterrorType motorcoolingcircuiterror = 7;
  // [] [0|1]
  optional Vcu_batteryvoltageerrorType vcu_batteryvoltageerror = 8;
  // [V] [0|17.78]
  optional double vcu_battervoltage = 9;
  // [Km/h] [0|254]
  optional double vcu_targcruisespeed = 10;
  // [] [0|3]
  optional Vcu_cruisecontrolstatusType vcu_cruisecontrolstatus = 11;
  // [] [0|1]
  optional Vcu_driverstatus_stsType vcu_driverstatus_sts = 12;
  // [] [0|3]
  optional Vcu_drivemode_stsType vcu_drivemode_sts = 13;
  // [] [0|7]
  optional Vcu_vehchg_stsType vcu_vehchg_sts = 14;
  // [] [0|3]
  optional Vcu_tbox_veh_stsType vcu_tbox_veh_sts = 15;
  // [] [0|7]
  optional Vcu_icm_energyrecoverymodeType vcu_icm_energyrecoverymode = 16;
  // [] [0|1]
  optional Vcu_icm_vehhvil_errType vcu_icm_vehhvil_err = 17;
  // [] [0|1]
  optional Vcu_icm_mot_errType vcu_icm_mot_err = 18;
  // [] [0|1]
  optional Vcu_icm_packvoltoff_errType vcu_icm_packvoltoff_err = 19;
  // [] [0|1]
  optional Vcu_icm_chggearlvType vcu_icm_chggearlv = 20;
  // [] [0|1]
  optional Vcu_icm_packsys_errType vcu_icm_packsys_err = 21;
  // [] [0|1]
  optional Vcu_icm_drvsys_errType vcu_icm_drvsys_err = 22;
  // [] [0|1]
  optional Vcu_icm_veh_errType vcu_icm_veh_err = 23;
}

message Teshun {
  optional Epb_status_0x152_152 epb_status_0x152_152 = 1; // report message
  optional Gw_abs_0x211_211 gw_abs_0x211_211 = 2; // report message
  optional Bcm_door_0x310_310 bcm_door_0x310_310 = 3; // report message
  optional Gw_vcu_sts_0x218_218 gw_vcu_sts_0x218_218 = 4; // report message
  optional Adu_controldrive_0x120_120 adu_controldrive_0x120_120 = 5; // control message
  optional Gw_vcu_control2_0x131_131 gw_vcu_control2_0x131_131 = 6; // report message
  optional Gw_scu_shiftersts_0xc8_c8 gw_scu_shiftersts_0xc8_c8 = 7; // report message
  optional Gw_vcu_drivests_0x10a_10a gw_vcu_drivests_0x10a_10a = 8; // report message
  optional Adu_controlbrake_0x110_110 adu_controlbrake_0x110_110 = 9; // control message
  optional Eps2_status_0x112_112 eps2_status_0x112_112 = 10; // report message
  optional Gw_mcu_power_0x226_226 gw_mcu_power_0x226_226 = 11; // report message
  optional Adu_controleps2_0x100_100 adu_controleps2_0x100_100 = 12; // control message
  optional Gw_mcu_output_0x225_225 gw_mcu_output_0x225_225 = 13; // report message
  optional Gw_abs_sts_0x221_221 gw_abs_sts_0x221_221 = 14; // report message
  optional Ibc_status_0x122_122 ibc_status_0x122_122 = 15; // report message
  optional Gw_vcu_whltq_0x107_107 gw_vcu_whltq_0x107_107 = 16; // report message
  optional Bcm_bodysts_0x344_344 bcm_bodysts_0x344_344 = 17; // report message
  optional Gw_bms_display_0x323_323 gw_bms_display_0x323_323 = 18; // report message
  optional Adu_bodycontrol_0x333_333 adu_bodycontrol_0x333_333 = 19; // control message
  optional Gw_bms_sts_0x181_181 gw_bms_sts_0x181_181 = 20; // report message
  optional Gw_vcu_control_0x185_185 gw_vcu_control_0x185_185 = 21; // report message
  optional Ibc_status2_0x124_124 ibc_status2_0x124_124 = 22; // report message
  optional Gw_vcu_hmi_0x358_358 gw_vcu_hmi_0x358_358 = 23; // report message
}
